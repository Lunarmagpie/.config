colorscheme gleam

map global user <w> ":new<ret>" -docstring "New Kakoune Window"

add-highlighter global/ number-lines
add-highlighter global/ show-matching
set-option global tabstop 2
set-option global indentwidth 2
set-option global scrolloff 8,3

evaluate-commands %sh{
        plugins="$kak_config/plugins"
            mkdir -p "$plugins"
                [ ! -e "$plugins/plug.kak" ] && \
                        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
                            printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}

plug "andreyorst/plug.kak" noload

plug "kakoune-lsp/kakoune-lsp" do %{
    cargo install --locked --force --path .
    # optional: if you want to use specific language servers
    mkdir -p ~/.config/kak-lsp
    cp -n kak-lsp.toml ~/.config/kak-lsp/
}

plug "evanrelf/byline.kak" config %{
    require-module "byline"
}

hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
    lsp-enable-window
}


map global normal <c> ":comment-line<ret>"
set-option global lsp_hover_anchor true

map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'
map global user y '<a-|>wl-copy<ret>' -docstring 'Yank to clipboard'

map global user k ':lsp-hover<ret>' -docstring 'LSP Show'
map global user a ':lsp-code-actions<ret>' -docstring 'LSP Action'
map global user i ':lsp-formatting<ret>' -docstring 'Format Code'

define-command popup-terminal -params 0.. 'eval %sh{footclient --app-id kakoune-popup $@}'
define-command terminal -params 0.. 'eval %sh{footclient $@}'

plug "andreyorst/fzf.kak" config %{
    map global user <s> ':fzf-mode<ret>'
} demand fzf %{
    set-option global fzf_terminal_command 'popup-terminal kak -c %val{session} -e "%arg{@}"'
    set-option global fzf_implementation 'sk'
    set-option global fzf_highlight_command 'bat'
}

map global user f ':fzf -preview -items-cmd %{git ls-files} <ret>' -docstring 'Fuzzy Find'

