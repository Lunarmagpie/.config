map global user w ":new-window-at-current-buffer<ret>" -docstring "New Kakoune Window"

set-option global tabstop 2
set-option global indentwidth 4
set-option global scrolloff 4,2
set-option global autoreload true
set-option global idle_timeout 50

set global ui_options terminal_status_on_top=true terminal_assistant=cat

evaluate-commands %sh{
        plugins="$kak_config/plugins"
            mkdir -p "$plugins"
            [ ! -e "$plugins/plug.kak" ] && \
                git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
        printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}

plug "andreyorst/plug.kak" noload

plug "https://gitlab.com/Screwtapello/kakoune-state-save"

plug "kakoune-lsp/kakoune-lsp" do %{
    cargo install --locked --force --path .
    # optional: if you want to use specific language servers
    mkdir -p ~/.config/kak-lsp
    cp -n kak-lsp.toml ~/.config/kak-lsp/
}

plug "evanrelf/byline.kak" config %{
   require-module "byline"
}

plug "andreyorst/smarttab.kak"

plug "h-youhei/kakoune-surround"

hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
    lsp-enable-window
    smarttab
}

map global normal <c-/> ":comment-line<ret>"

set-option global lsp_hover_anchor true
lsp-auto-hover-enable

map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'
map global user y '<a-|>wl-copy<ret>' -docstring 'Yank to clipboard'

map global user b ':popup-terminal kak -c %val{session} -e lsp-hover-buffer<ret>' -docstring 'Open LSP Hover Buffer in New Window'

map global user a ':lsp-code-actions<ret>' -docstring 'LSP Action'
map global user i ':lsp-formatting<ret>' -docstring 'Format Code'
map global user <ret> ':popup-terminal<ret>' -docstring 'Open Popup Window'

map global user m ':enter-user-mode surround<ret>'

hook global KakBegin .* %{
    eval %sh{ kak-tree-sitter -dks --with-highlighting --init $kak_session }
    colorscheme gleam

    declare-user-mode surround

    map global surround s ':surround<ret>' -docstring 'Add surrounding tag'
    map global surround r ':change-surround<ret>' -docstring 'Remove surrounding tag'
    map global surround d ':delete-surround<ret>' -docstring 'Change surrounding dtag'

    add-highlighter global/ number-lines
    add-highlighter global/ show-matching
    addhl global/ wrap

    define-command popup-terminal -params 0.. 'nop %sh{(footclient --app-id kakoune-popup $@) < /dev/null > /dev/null 2>&1 &}'
    define-command -override terminal -params 0.. 'nop %sh{(footclient $@) < /dev/null > /dev/null 2>&1 &}'
    define-command popup-terminal-sync -params 0.. 'eval %sh{footclient --app-id kakoune-popup $@}'

    define-command config-reload 'source ~/.config/kak/kakrc'
    define-command new-window-at-current-buffer 'terminal kak -c %val{session} %val{buffile}'

    declare-option bool show_inline_hint false

    define-command -override lsp-show-hover -params 4 -docstring %{
        lsp-show-hover <anchor> <info> <diagnostics> <code_lenses>
        Render hover info.
    } %{ evaluate-commands %sh{
        lsp_info=$2
        lsp_diagnostics=$3
        lsp_code_lenses=$4

        lsp_info="${lsp_info#"${lsp_info%%[![:space:]]*}"}"
    		lsp_info=$(echo "$lsp_info" | fold -w 100 -s)
    		lsp_info=$(python -c "import sys; print('', '\n'.join(map(lambda x: f' {x} ', sys.argv[1].splitlines())), ' ', sep='\n')" "$lsp_info")
		    lsp_info=$(printf %s "$lsp_info" | sed s/\'/\'\'/g)

        lsp_diagnostics="${lsp_diagnostics#"${lsp_diagnostics%%[![:space:]]*}"}"
    		lsp_diagnostics=$(echo "$lsp_diagnostics" | fold -w 100 -s)
		    lsp_diagnostics=$(printf %s "$lsp_diagnostics" | sed s/\'/\'\'/g)

    		if [ "$kak_opt_show_inline_hint" = "true" ]; then
        		if [ -n "$lsp-info" ]; then
                case $kak_opt_lsp_hover_anchor in
                    true) printf "info -markup -anchor %%arg{1} -- '%s'" "$lsp_info";;
                    *)    printf "info -markup -- '%s'" "$lsp_info";;
                esac
                printf ';set-option window show_inline_hint false'
                exit 0
            fi
        fi

    		if [ -n "$lsp_diagnostics" ]; then 
            printf "info -markup -- '%s'" "$lsp_diagnostics"
    		fi
    }}

    define-command -override tree-sitter-user-after-highlighter %{
      add-highlighter -override buffer/show-matching show-matching
    }
}

map global user k ':lsp-hover<ret>' -docstring 'LSP Show'
map global user k ':eval %{lsp-hover;set-option window show_inline_hint true}<ret>' 

plug "andreyorst/fzf.kak" config %{
    map global user <s> ':fzf-mode<ret>'
} demand fzf %{
    set-option global fzf_terminal_command 'popup-terminal-sync kak -c %val{session} -e "%arg{@}"'
    set-option global fzf_implementation 'sk --layout reverse'
    set-option global fzf_highlight_command 'bat'
}

map global user f ':fzf -preview -items-cmd %{git ls-files | sort -u} -kak-cmd edit<ret>' -docstring 'Fuzzy Find'
map global user F '<space>sF<ret>' -docstring 'Fuzzy Find In Directory'
map global user p '<a-!>wl-paste<ret>' -docstring 'Paste from system clipboard after selection'
map global user P '<!>wl-paste<ret>' -docstring 'Paste from system clipboard before selection'

