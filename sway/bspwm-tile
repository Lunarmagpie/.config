#!/bin/env python

import subprocess
import json
import sys
import time
from itertools import chain


def tree():
    return json.loads(subprocess.check_output(["swaymsg", "-t", "get_tree"]))


def loop(msg):
    width = msg["container"]["rect"]["width"]
    height = msg["container"]["rect"]["height"]

    if msg["change"] == "focus":
        if width >= height:
            subprocess.run(["swaymsg", "splith"])
        else:
            subprocess.run(["swaymsg", "splitv"])

    if msg["change"] == "close":
        time.sleep(0.01)
        print(json.dumps(tree(), indent=4))

        nodes = tree()["nodes"]
        output_nodes = filter(lambda x: x["type"] == "output", nodes)
        workspaces = chain.from_iterable(
            map(
                lambda output: filter(
                    lambda x: x["type"] == "workspace", output["nodes"]
                ),
                output_nodes,
            )
        )
        selected_workspace = next(filter(lambda w: w["focused"], workspaces))
        print(selected_workspace)



def main():
    process = subprocess.Popen(
        ["swaymsg", "-m", "-r", "-t", "subscribe", '["window"]'], stdout=subprocess.PIPE
    )

    while True:
        try:
            msg = json.loads(process.stdout.readline())
            loop(msg)
        except Exception as e:
            raise e
            print(e)


if __name__ == "__main__":
    main()
